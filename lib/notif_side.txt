import 'dart:convert';
import 'dart:developer';

import 'package:flutter/material.dart';
import 'package:http/http.dart';
import 'package:intl/intl.dart';
import 'package:page_transition/page_transition.dart';
import 'package:telephony/telephony.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:url_launcher/url_launcher_string.dart';
import 'package:zamboangaemergency/default/config.dart';
import 'package:zamboangaemergency/detailed_guide_screen.dart';
import 'package:zamboangaemergency/detailed_hotlines_screen.dart';

import 'default/http.dart';

class NotificationsScreen extends StatefulWidget {
  @override
  _NotificationsScreenState createState() => _NotificationsScreenState();
}

class _NotificationsScreenState extends State<NotificationsScreen> {
  GlobalKey<ScaffoldMessengerState> _scaffoldKey = GlobalKey();
  List _notifications = [];

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {_loadNotifications();});
  }

  _loadNotifications() async {
    Http().showLoadingOverlay(context);
    dynamic response = await Http(url: 'notifications').getWithHeader();
    if (response is String) {
      Navigator.pop(context);
      _scaffoldKey.currentState?.showSnackBar(
        SnackBar(
          backgroundColor: Color(0xFF323232),
          content: Text(
            response,
            textScaleFactor: .8,
            style: TextStyle(
              color: Colors.white,
              fontSize: Config. title * Config.textMultiplier,
              fontFamily: 'Roboto'
            )
          )
        )
      );
      return;
    }
    else if (response is Response) {
      log(response.body);
      if (response.statusCode != 200) {
        Navigator.pop(context);
        try {
          Map<String, dynamic> body = json.decode(response.body);
          _scaffoldKey.currentState?.showSnackBar(
            SnackBar(
              backgroundColor: Color(0xFF323232),
              content: Text(
                body.containsKey('errors')?jsonDecode(response.body)['errors'][jsonDecode(response.body)['errors'].keys.toList()[0]][0].toString():(body['message']??'Something went wrong'),
                textScaleFactor: .8,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: Config. title * Config.textMultiplier,
                  fontFamily: 'Roboto'
                )
              )
            )
          );
          return;
        }
        catch(error) {
          _scaffoldKey.currentState?.showSnackBar(
            SnackBar(
              backgroundColor: Color(0xFF323232),
              content: Text(
                'Something went wrong',
                textScaleFactor: .8,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: Config. title * Config.textMultiplier,
                  fontFamily: 'Roboto'
                )
              )
            )
          );
          return;
        }
      }
      else {
        setState(() {
          _notifications = new List.from(json.decode(response.body)); 
        });
        Navigator.pop(context);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: ScaffoldMessenger(
        key: _scaffoldKey,
        child: SafeArea(
          child: DefaultTabController(
            length: 2,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Padding(
                  padding: EdgeInsets.only(bottom: 2 * Config.heightMultiplier),
                  child: Text(
                    'NOTIFICATIONS',
                    textScaleFactor: .8,
                    style: TextStyle(
                      fontSize: Config. header * Config.textMultiplier,
                      fontWeight: FontWeight.bold
                    ),
                  )
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: BouncingScrollPhysics(),
                    child: Column(
                      children: [
                        for (var notification in _notifications)
                        Padding(
                          padding: EdgeInsets.only(top: 0.5 * Config.heightMultiplier, bottom: 0.5 * Config.heightMultiplier),
                          child: ButtonTheme(
                            height: (DeviceUtil.isTablet?5:6) * Config.heightMultiplier,
                            minWidth: double.infinity,
                            child: MaterialButton(
                              onPressed: () {
                              },
                              // color: Config.appColor,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.all(Radius.circular(10)),
                                side: BorderSide(color: Config.appColor)
                              ),
                              height: (DeviceUtil.isTablet?5:6) * Config.heightMultiplier,
                              padding: EdgeInsets.symmetric(horizontal: 2 * Config.widthMultiplier),
                              child: Padding(
                                padding: EdgeInsets.symmetric(vertical: 1 * Config.heightMultiplier, horizontal: 1 * Config.widthMultiplier),
                                child: Row(
                                  children: [
                                    Expanded(
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.start,
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          Row(
                                            children: [
                                              Text(
                                                '${notification['data']['title']} ',
                                                textScaleFactor: .8,
                                                textAlign: TextAlign.left,
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  fontSize: Config.subheader * Config.textMultiplier,
                                                  color: Colors.black
                                                ),
                                              ),
                                              Text(
                                                DateFormat('y-MM-dd HH:mm').format(DateTime.parse(notification['created_at'])),
                                                textScaleFactor: .8,
                                                textAlign: TextAlign.left,
                                                style: TextStyle(
                                                  fontSize: Config.title * Config.textMultiplier,
                                                  color: Colors.black54
                                                ),
                                              )
                                            ]
                                          ),
                                          Padding(
                                            padding: EdgeInsets.symmetric(vertical: 0.5 * Config.heightMultiplier),
                                            child: Text(
                                              notification['data']['body'],
                                              textScaleFactor: .8,
                                              textAlign: TextAlign.left,
                                              style: TextStyle(
                                                fontSize: Config.title * Config.textMultiplier,
                                                color: Colors.black
                                              ),
                                            )
                                          )
                                        ]
                                      )
                                    ),
                                    if (notification['data']['image'] != null)
                                    SizedBox(
                                      width: 20 * Config.imageSizeMultiplier,
                                      child: Image.network(
                                        'http://${Http().ip}:8000${notification['data']['image']}',
                                        fit: BoxFit.fitWidth,
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ),
                      ],
                    ),
                  )
                ),
              ],
            )
          )
        ),
      )
    );
  }
}
